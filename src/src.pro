######################################################################
# Automatically generated by qmake
# > qmake.exe -project
######################################################################

TEMPLATE = app
TARGET   = DownZemAll
QT       += core gui
QT       += network

win32 {
    QT   += winextras
}
unix|win32-msvc* {
    QT   += webenginewidgets
}

greaterThan(QT_MAJOR_VERSION, 4): QT += widgets

CONFIG += c++11

gcc|clang{
    QMAKE_CFLAGS += -std=c99
    QMAKE_CXXFLAGS += -std=c++11
}

lessThan(QT_VERSION, 5.0) {
    warning("prefere to build it with Qt 5.0")
}


#-------------------------------------------------
# Dependencies
#-------------------------------------------------
include($$PWD/../3rd/3rd.pri)



#-------------------------------------------------
# LibTorrent
#-------------------------------------------------
LIBTORRENT_INSTALL = $${OUT_PWD}/../libtorrent_install

!exists($$LIBTORRENT_INSTALL) {
    error("libtorrent's install directory doesn't exist: $$LIBTORRENT_INSTALL")
}

# Note: order of declared libs is very important
LIBS += -L$${LIBTORRENT_INSTALL}/lib -llibtorrent
# LIBS += -lwsock32 -lws2_32 -lIphlpapi --> see libtorrent-config.pri

INCLUDEPATH += $${LIBTORRENT_INSTALL}/include/

include($$PWD/../3rd/libtorrent/libtorrent-config.pri)



#-------------------------------------------------
# Other
#-------------------------------------------------
win32{
    # Link to system library "version.dll" on Windows
    # Required by GetFileVersionInfo(), GetFileVersionInfoSize() and VerQueryValue()
    LIBS += -lVersion
}else{

}

win32 {
    DEFINES += USE_QT_WINEXTRAS
}
win32-msvc* {
    # Build with QtWebEngine (Rem: works only with MSVC on Windows)
    DEFINES += USE_QT_WEBENGINE
}
unix{
    DEFINES += USE_QT_WEBENGINE
}

#-------------------------------------------------
# VERSION
#-------------------------------------------------
VERSION_FILENAME = $$PWD/../version

!exists( $${VERSION_FILENAME} ) {
    error( "Cannot find version file \"$${VERSION_FILENAME}\"" )
}

APP_VERSION = "$$cat($$VERSION_FILENAME)"
DEFINES += APP_VERSION=\\\"$$APP_VERSION\\\"


#-------------------------------------------------
# INCLUDE
#-------------------------------------------------
INCLUDEPATH += $$PWD/../include/


#-------------------------------------------------
# SOURCES
#-------------------------------------------------
include($$PWD/core/core.pri)
include($$PWD/dialogs/dialogs.pri)
include($$PWD/io/io.pri)
include($$PWD/ipc/ipc.pri)
include($$PWD/widgets/widgets.pri)

HEADERS += \
    $$PWD/about.h \
    $$PWD/builddefs.h \
    $$PWD/globals.h \
    $$PWD/mainwindow.h \
    $$PWD/version.h


SOURCES += \
    $$PWD/mainwindow.cpp \
    $$PWD/main.cpp

FORMS += \
    $$PWD/mainwindow.ui



#-------------------------------------------------
# RESOURCES
#-------------------------------------------------
RESOURCES += $$PWD/resources.qrc

win32|unix {
    RC_FILE += $$PWD/resources_win.rc
}

TRANSLATIONS += \
    $$PWD/locale/dza_ar_EG.ts \ # Arabic
    $$PWD/locale/dza_de_DE.ts \ # German
    $$PWD/locale/dza_en_US.ts \ # English (default)
    $$PWD/locale/dza_es_ES.ts \ # Spanish
    $$PWD/locale/dza_fr_FR.ts \ # French
    $$PWD/locale/dza_it_IT.ts \ # Italian
    $$PWD/locale/dza_ko_KR.ts \ # Korean
    $$PWD/locale/dza_nl_NL.ts \ # Dutch
    $$PWD/locale/dza_pl_PL.ts \ # Polish
    $$PWD/locale/dza_pt_BR.ts \ # Portuguese (Brazil)
    $$PWD/locale/dza_pt_PT.ts \ # Portuguese (Portugal)
    $$PWD/locale/dza_ru_RU.ts \ # Russian
    $$PWD/locale/dza_zh_CN.ts   # Chinese (Simplified & Traditional)


lupdate_only{
    # By default, lupdate parses all the repository including boost,
    # libtorrent, -etc.-, from the '3rd' directory.
    # There's nothing to translate there, so we limit the lupdate's analysis
    # to the 'src' directory only, excluding '3rd' and also the Qt path.
    message("excluding 3rd/ and include/ directories")
    TR_EXCLUDE += $$PWD/../3rd/*
    TR_EXCLUDE += $$PWD/../include/*
    message("excluding $(QTDIR)")
    TR_EXCLUDE += $(QTDIR)/include/*
}

#-------------------------------------------------
# BUILD OPTIONS
#-------------------------------------------------
# Rem: On Ubuntu, directories starting with '.' are hidden by default
win32{
    MOC_DIR =      ./.moc
    OBJECTS_DIR =  ./.obj
    UI_DIR =       ./.ui
}else{
    MOC_DIR =      ./_moc
    OBJECTS_DIR =  ./_obj
    UI_DIR =       ./_ui
}


#-------------------------------------------------
# OUTPUT
#-------------------------------------------------
# Disable qDebug() output in release mode
CONFIG(release, debug|release) {
    DEFINES += QT_NO_DEBUG_OUTPUT
}


#-------------------------------------------------
# TARGET DIRECTORY
#-------------------------------------------------
# Needs to define a subfolder, as the *.DLL
# cannot be copied in the root folder.
DESTDIR = $${OUT_PWD}/../downzemall_install

#build_pass:CONFIG(debug, debug|release) {
#    unix: TARGET = $$join(TARGET,,,_debug)
#    else: TARGET = $$join(TARGET,,,d)
#}
#

#-------------------------------------------------
# INSTALL
#-------------------------------------------------
# Remark:
# =======
# Eventually, in your favorite IDE, replace build chain command
#   'make'
# by
#   'make install'
#
# It will install the DLLs, documentation, data, etc.
# that are required to execute the application.
#

# instructions for 'make install'


# install translations
translation_files.files = $$PWD/locale/*.qm
translation_files.path = $${DESTDIR}/locale
INSTALLS += translation_files


# install Qt binaries (for Windows only)
# This is a manual install that is similar to 'windeployqt' but more minimalist
win32{
    CONFIG(debug,debug|release){
        platform_plugin_to_copy.files += $$[QT_INSTALL_PLUGINS]/platforms/qminimald.dll
        platform_plugin_to_copy.files += $$[QT_INSTALL_PLUGINS]/platforms/qwindowsd.dll
        platform_plugin_to_copy.path = $${DESTDIR}/platforms
        INSTALLS += platform_plugin_to_copy

        imageformats_plugin_to_copy.files += $$[QT_INSTALL_PLUGINS]/imageformats/qgifd.dll
        imageformats_plugin_to_copy.files += $$[QT_INSTALL_PLUGINS]/imageformats/qicod.dll
        imageformats_plugin_to_copy.files += $$[QT_INSTALL_PLUGINS]/imageformats/qjpegd.dll
        imageformats_plugin_to_copy.path = $${DESTDIR}/imageformats
        INSTALLS += imageformats_plugin_to_copy

        icon_engine_plugin_to_copy.files += $$[QT_INSTALL_PLUGINS]/iconengines/qsvgicond.dll
        icon_engine_plugin_to_copy.path = $${DESTDIR}/iconengines
        INSTALLS += icon_engine_plugin_to_copy

        style_plugin_to_copy.files += $$[QT_INSTALL_PLUGINS]/styles/qwindowsvistastyled.dll
        style_plugin_to_copy.path = $${DESTDIR}/styles
        INSTALLS += style_plugin_to_copy
    }else{
        platform_plugin_to_copy.files += $$[QT_INSTALL_PLUGINS]/platforms/qminimal.dll
        platform_plugin_to_copy.files += $$[QT_INSTALL_PLUGINS]/platforms/qwindows.dll
        platform_plugin_to_copy.path = $${DESTDIR}/platforms
        INSTALLS += platform_plugin_to_copy

        imageformats_plugin_to_copy.files += $$[QT_INSTALL_PLUGINS]/imageformats/qgif.dll
        imageformats_plugin_to_copy.files += $$[QT_INSTALL_PLUGINS]/imageformats/qico.dll
        imageformats_plugin_to_copy.files += $$[QT_INSTALL_PLUGINS]/imageformats/qjpeg.dll
        imageformats_plugin_to_copy.path = $${DESTDIR}/imageformats
        INSTALLS += imageformats_plugin_to_copy

        icon_engine_plugin_to_copy.files += $$[QT_INSTALL_PLUGINS]/iconengines/qsvgicon.dll
        icon_engine_plugin_to_copy.path = $${DESTDIR}/iconengines
        INSTALLS += icon_engine_plugin_to_copy

        style_plugin_to_copy.files += $$[QT_INSTALL_PLUGINS]/styles/qwindowsvistastyle.dll
        style_plugin_to_copy.path = $${DESTDIR}/styles
        INSTALLS += style_plugin_to_copy
    }
}

# install OpenSSL (for Windows only)
win32{
    contains(QT_ARCH, i386) {
        # message("32-bit")
        #libs_openssl_to_copy.files += $$PWD/../3rd/openssl/v1.1.1/windows_x86_32bits/libcrypto-1_1.dll
        #libs_openssl_to_copy.files += $$PWD/../3rd/openssl/v1.1.1/windows_x86_32bits/libssl-1_1.dll
        libs_openssl_to_copy.files += $$PWD/../3rd/openssl/v1.0.2/windows_x86_32bits/libeay32.dll
        libs_openssl_to_copy.files += $$PWD/../3rd/openssl/v1.0.2/windows_x86_32bits/ssleay32.dll

    } else {
        # message("64-bit")
        libs_openssl_to_copy.files += $$PWD/../3rd/openssl/v1.1.1/windows_x86_64bits/libcrypto-1_1-x64.dll
        libs_openssl_to_copy.files += $$PWD/../3rd/openssl/v1.1.1/windows_x86_64bits/libssl-1_1-x64.dll
    }
    libs_openssl_to_copy.path = $${DESTDIR}
    INSTALLS += libs_openssl_to_copy
}

# install yt-dlp
win32{
    youtube_dl_executable_to_copy.files += $$PWD/../3rd/yt-dlp/bin/yt-dlp.exe
    youtube_dl_executable_to_copy.path = $${DESTDIR}
    INSTALLS += youtube_dl_executable_to_copy
}
unix{
    youtube_dl_executable_to_copy.files += $$PWD/../3rd/yt-dlp/bin/yt-dlp
    youtube_dl_executable_to_copy.path = $${DESTDIR}
    INSTALLS += youtube_dl_executable_to_copy

    # The binary is marked as executable *after* been copied
    youtube_dl_executable_permission.path = $${DESTDIR}
    youtube_dl_executable_permission.extra = chmod 775 $${DESTDIR}/yt-dlp
    INSTALLS += youtube_dl_executable_permission
}

isEmpty(INSTALLS){
    message("INSTALLS is empty, QtCreator > Projects > Build Steps >" \
            "Make arguments should be empty too.")
}

# install desktop shortcut
unix{
    desktop_shortcut_to_copy.files += $$PWD/../installer/unix/portable/DownZemAll.desktop
    desktop_shortcut_to_copy.files += $$PWD/../installer/unix/portable/DownZemAll_64x64.png
    desktop_shortcut_to_copy.files += $$PWD/../installer/unix/portable/install_shortcut_desktop.sh
    desktop_shortcut_to_copy.files += $$PWD/../installer/unix/portable/uninstall_shortcut_desktop.sh
    desktop_shortcut_to_copy.files += $$PWD/../installer/unix/portable/README
    desktop_shortcut_to_copy.path = $${DESTDIR}/desktop_shortcut/
    INSTALLS += desktop_shortcut_to_copy
}
